# -*- coding: utf-8 -*-
"""Brain.io.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JmB8F6DqbEdleen7uApL6EvNVnmQN_z-
"""

s!pip install xgboost

import scipy.io as sio
import numpy as np

filepath='/content/Brain.io/P1_low2.mat'
d=sio.loadmat(filepath)
x=d['y']
y=np.squeeze(d['trig'])

X=[]
Y=[]
for i in range(len(y)):
  if y[i]==-1 or y[i]==1:
    X.append(x[i,:])
    Y.append(0)
  elif y[i]==2:
    X.append(x[i,:])
    Y.append(1)
X=np.array(X)
Y=np.array(Y)

np.unique(y,return_counts=True)

np.unique(Y,return_counts=True)

import tensorflow as tf
from xgboost import XGBClassifier

from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, roc_auc_score

X_train,X_val,Y_train,Y_val=train_test_split(X,Y,test_size=0.25,shuffle=True,stratify=Y)

np.unique(Y_val,return_counts=True)

"""## SVM"""

clf=SVC(class_weight='balanced')
clf.fit(X_train,Y_train)

pred_train=clf.predict(X_train)
pred_val=clf.predict(X_val)

training_score=(pred_train==Y_train)
val_score=(pred_val==Y_val)

print("Training Score: ",training_score.mean())
print("Validation Score: ",val_score.mean())
print(classification_report(Y_val,pred_val))

"""## XGBoost"""

clf=XGBClassifier(scale_pos_weight=8)
clf.fit(X_train,Y_train)

pred_train=clf.predict(X_train)
pred_val=clf.predict(X_val)

training_score=(pred_train==Y_train)
val_score=(pred_val==Y_val)

print("Training Score: ",training_score.mean())
print("Validation Score: ",val_score.mean())
print(classification_report(Y_val,pred_val))

